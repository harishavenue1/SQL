CREATE DATABASE myrestaurant;

CREATE TABLE IF NOT EXISTS myrestaurant.users(
    id INT(10) NOT NULL PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(200) NOT NULL,
    phone VARCHAR(200),
    address VARCHAR(200),
    password VARCHAR(200) NOT NULL
);

INSERT INTO
    myrestaurant.users(name, phone, address, password)
VALUES
    ('Gaurav', '123456789', 'Mumbai,India', 'pass134'),
    (
        'Sakshi',
        '987654321',
        'Chennai,India',
        'pass456'
    );

SELECT
    *
FROM
    myrestaurant.users
where
    id = 2;

SELECT
    *
FROM
    myrestaurant.users
where
    id = 1;

Insert INTO
    myrestaurant.users
VALUES
    (21, 'Harish', '9738', 'Bangalore', 'root');

SELECT
    *
FROM
    myrestaurant.users
where
    id = 3;

INSERT INTO
    myrestaurant.users(name, phone, address, password)
VALUES
    ('Gaurav', '123456789', 'Mumbai,India', 'pass134'),
    (
        'Sakshi',
        '987654321',
        'Chennai,India',
        'pass456'
    );

SELECT
    distinct name
from
    myrestaurant.users;

INSERT INTO
    myrestaurant.users(name, phone, address, password)
VALUES
    ('Gaurav', '123456789', 'Mumbai,India', 'pass134');

SELECT
    Count(name)
from
    myrestaurant.users;

use myrestaurant;

CREATE TABLE IF NOT EXISTS employeeWithConstraints(
    id INT NOT NULL,
    name VARCHAR(50) NOT NULL,
    salary DOUBLE,
    hiring_date DATE DEFAULT '2023-01-01',
    UNIQUE (id),
    CHECK (salary > 1000)
);

insert INTO
    employeeWithConstraints
VALUES
    (1, 'harish', 1001, '2022-01-01');

insert INTO
    employeeWithConstraints
VALUES
    (2, 'abc', 10000, '2022-02-02');

SELECT
    *
from
    employeeWithConstraints;

insert INTO
    employeeWithConstraints
VALUES
    (3, 'abc', 10000, '2022-02-06');

insert INTO
    employeeWithConstraints
VALUES
    (4, 'abc', 10000, null);

--default when columnName not mentioned while inserting
insert INTO
    employeeWithConstraints(id, name, salary)
VALUES
    (5, 'abc', 10000);

--option to modify using keyword CONSTRAINT
CREATE TABLE IF NOT EXISTS employeeWithConstraints_tmp(
    id INT NOT NULL,
    name VARCHAR(50) NOT NULL,
    salary DOUBLE,
    hiring_date DATE DEFAULT '2023-01-01',
    CONSTRAINT unique_id UNIQUE (id),
    CONSTRAINT salary_check CHECK (salary > 1000)
);

insert INTO
    employeeWithConstraints_tmp(id, name, salary)
VALUES
    (5, 'abc', 100);

CREATE TABLE IF NOT EXISTS myrestaurant.employee(
    id INT,
    name VARCHAR(50),
    address VARCHAR(50),
    city VARCHAR(50)
);

insert INTO
    myrestaurant.employee
VALUES
    (5, 'abc', "Blore1", "Blore");

SELECT
    *
from
    myrestaurant.employee;

--Add Column [DDL]
alter table
    myrestaurant.employee
add
    DOB date;

SELECT
    *
from
    myrestaurant.employee;

--see table structure
show create table myrestaurant.employee;

--modify column type
alter table
    myrestaurant.employee
modify
    column name VARCHAR(100);

--delete column
alter table
    myrestaurant.employee drop column city;

--rename column
alter table
    myrestaurant.employee rename column fullName to empName;

--truncate table -> removes data frm table, but not table structure
truncate table myrestaurant.employee;

--drop table -> removes table as well
drop table myrestaurant.employee;

CREATE TABLE IF NOT EXISTS myrestaurant.employee(
    id INT,
    name VARCHAR(50),
    address VARCHAR(50),
    city VARCHAR(50)
);

insert INTO
    myrestaurant.employee
VALUES
    (1, 'abc', "Blore1", "Blore");

SELECT
    *
from
    myrestaurant.employee;

--ADD Constraints through alter command
alter table
    myrestaurant.employee
add
    CONSTRAINT unique_id UNIQUE(id);

--show table structure
show CREATE TABLE myrestaurant.employee;

--remove Constraints through alter command
alter table
    myrestaurant.employee drop CONSTRAINT unique_id;

--PrimaryKey Constraint
CREATE TABLE IF NOT EXISTS myrestaurant.persons(
    id INT,
    name VARCHAR(50),
    age INT,
    CONSTRAINT pk PRIMARY KEY (id)
);

insert INTO
    myrestaurant.persons
VALUES
    (1, 'abc', 25);

--PrimarKey cant take Null Values
insert INTO
    myrestaurant.persons
VALUES
    (null, 'abc', 25);

--ForeignKey
CREATE TABLE IF NOT EXISTS myrestaurant.customer(
    cust_id INT,
    name VARCHAR(50),
    age INT,
    CONSTRAINT pk PRIMARY KEY (cust_id)
);

CREATE TABLE IF NOT EXISTS myrestaurant.order(
    order_id INT,
    order_num INT,
    customer_id INT,
    CONSTRAINT pk PRIMARY KEY (order_id),
    CONSTRAINT fk foreign key (customer_id) references customer(cust_id)
);

--DQL
SELECT
    *
from
    myrestaurant.users;

--alias
SELECT
    id,
    name as fullName
from
    myrestaurant.users;

--countRecords
SELECT
    Count(*) as totalRecords
from
    myrestaurant.users;

--distinctValues
SELECT
    distinct (name) as distinctRecords
from
    myrestaurant.users;

--CountOfDistinctRecords
SELECT
    count(distinct (name)) as CountOfDistinctRecords
from
    myrestaurant.users;

--oldName and newName - using concat
SELECT
    name as oldName,
    CONCAT(name, ' ', 'sir') as newName
from
    myrestaurant.users;

--filter
SELECT * from myrestaurant.users
where password = 'root'

--update
update myrestaurant.users
set phone = concat(phone,'','175651')
where name = 'Harish'

--cannot update when there is no column
--Error: ER_BAD_FIELD_ERROR: Unknown column 'salary' in 'field list'
update myrestaurant.users
set salary = 1000

--address update
update myrestaurant.users
set address = 'Bangalore,India'
where address = 'Bangalore'

--delete records
delete from myrestaurant.users
where name = 'Sakshi'

delete from myrestaurant.users
where name = 'Gaurav'

insert into myrestaurant.users
Values
(2, 'B', 1234567891, 'Kerala,India', 'root'),
(3, 'C', 1234567892, 'Mumbai,India', 'root'),
(4, 'D', 1234567893, 'Hyderabad,India', 'root'),
(5, 'E', 1234567894, 'Andhra,India', 'root'),
(6, 'F', 1234567895, 'Delhi,India', 'root')

--limit results to show
SELECT * from myrestaurant.users limit 1;

--arrange results by ordering [Order By]
select * from myrestaurant.users order by name desc
select * from myrestaurant.users order by address desc

insert into myrestaurant.users
Values
(20, 'B1', 1234567891, 'Kerala,India', 'root'),
(31, 'C1', 1234567892, 'Mumbai,India', 'root'),
(41, 'D1', 1234567893, 'Hyderabad,India', 'root'),
(51, 'E1', 1234567894, 'Andhra,India', 'root'),
(61, 'F1', 1234567895, 'Delhi,India', 'root')

--multiOrderBy
select * from myrestaurant.users order by name asc, address desc

--max of value without max keyword
--below is correct if only 1 user having max
select * from myrestaurant.users order by phone desc limit 1

--incase of multiple users having max value
--??


